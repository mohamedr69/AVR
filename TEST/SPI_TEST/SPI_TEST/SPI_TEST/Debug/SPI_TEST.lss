
SPI_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db4  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078f  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067a  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050f  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f4  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002c07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  7a:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vidSetPinMode>:
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_vidSetPinMode(_enuPORTx enuPORT,_enuPINx enuPIN,_enuMode enuMode){
	
	switch(enuPORT)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	01 f1       	breq	.+64     	; 0xc6 <DIO_vidSetPinMode+0x44>
  86:	30 f0       	brcs	.+12     	; 0x94 <DIO_vidSetPinMode+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	b1 f1       	breq	.+108    	; 0xf8 <DIO_vidSetPinMode+0x76>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_vidSetPinMode+0x10>
  90:	4c c0       	rjmp	.+152    	; 0x12a <DIO_vidSetPinMode+0xa8>
  92:	08 95       	ret
	{
		case GPIOA:
		if(enuMode){
  94:	44 23       	and	r20, r20
  96:	59 f0       	breq	.+22     	; 0xae <DIO_vidSetPinMode+0x2c>
			SET_BIT(DDRA,enuPIN);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_vidSetPinMode+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_vidSetPinMode+0x1e>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
			}else{
			CLR_BIT(DDRA,enuPIN);
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vidSetPinMode+0x38>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vidSetPinMode+0x34>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	08 95       	ret
			#if PULL_UP
			SET_BIT(PORTA,High);
			#endif
		}break;
		case GPIOB:
		if(enuMode){
  c6:	44 23       	and	r20, r20
  c8:	59 f0       	breq	.+22     	; 0xe0 <DIO_vidSetPinMode+0x5e>
			SET_BIT(DDRB,enuPIN);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_vidSetPinMode+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_vidSetPinMode+0x50>
  da:	82 2b       	or	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
			}else{
			CLR_BIT(DDRB,enuPIN);
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vidSetPinMode+0x6a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vidSetPinMode+0x66>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
			#if(PULL_UP)
			SET_BIT(PORTB,High);
			#endif
		}break;
		case GPIOC:
		if(enuMode){
  f8:	44 23       	and	r20, r20
  fa:	59 f0       	breq	.+22     	; 0x112 <DIO_vidSetPinMode+0x90>
			SET_BIT(DDRC,enuPIN);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_vidSetPinMode+0x86>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_vidSetPinMode+0x82>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
			}else{
			CLR_BIT(DDRC,enuPIN);
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vidSetPinMode+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vidSetPinMode+0x98>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
			#if(PULL_UP)
			SET_BIT(PORTC,High);
			#endif
		}break;
		case GPIOD:
		if(enuMode){
 12a:	44 23       	and	r20, r20
 12c:	59 f0       	breq	.+22     	; 0x144 <DIO_vidSetPinMode+0xc2>
			SET_BIT(DDRD,enuPIN);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vidSetPinMode+0xb8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vidSetPinMode+0xb4>
 13e:	82 2b       	or	r24, r18
 140:	81 bb       	out	0x11, r24	; 17
 142:	08 95       	ret

			}else{
			CLR_BIT(DDRD,enuPIN);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vidSetPinMode+0xce>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vidSetPinMode+0xca>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <DIO_vidSetPinValue>:
	}
	
}
void DIO_vidSetPinValue(_enuPORTx enuPORT,_enuPINx enuPIN,_enuOutputMode enuOutputMode){
	
	switch(enuPORT)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	01 f1       	breq	.+64     	; 0x1a0 <DIO_vidSetPinValue+0x44>
 160:	30 f0       	brcs	.+12     	; 0x16e <DIO_vidSetPinValue+0x12>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	b1 f1       	breq	.+108    	; 0x1d2 <DIO_vidSetPinValue+0x76>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	09 f4       	brne	.+2      	; 0x16c <DIO_vidSetPinValue+0x10>
 16a:	4c c0       	rjmp	.+152    	; 0x204 <DIO_vidSetPinValue+0xa8>
 16c:	08 95       	ret
	{
		case GPIOA:
		if(enuOutputMode){
 16e:	44 23       	and	r20, r20
 170:	59 f0       	breq	.+22     	; 0x188 <DIO_vidSetPinValue+0x2c>
			SET_BIT(PORTA,enuPIN);
 172:	2b b3       	in	r18, 0x1b	; 27
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vidSetPinValue+0x22>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vidSetPinValue+0x1e>
 182:	82 2b       	or	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret
			}else{
			CLR_BIT(PORTA,enuPIN);
 188:	2b b3       	in	r18, 0x1b	; 27
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vidSetPinValue+0x38>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vidSetPinValue+0x34>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	08 95       	ret
		}break;
		case GPIOB:
		if(enuOutputMode){
 1a0:	44 23       	and	r20, r20
 1a2:	59 f0       	breq	.+22     	; 0x1ba <DIO_vidSetPinValue+0x5e>
			SET_BIT(PORTB,enuPIN);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_vidSetPinValue+0x54>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_vidSetPinValue+0x50>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	08 95       	ret
			}else{
			CLR_BIT(PORTB,enuPIN);
 1ba:	28 b3       	in	r18, 0x18	; 24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_vidSetPinValue+0x6a>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_vidSetPinValue+0x66>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	08 95       	ret
		}break;
		case GPIOC:
		if(enuOutputMode){
 1d2:	44 23       	and	r20, r20
 1d4:	59 f0       	breq	.+22     	; 0x1ec <DIO_vidSetPinValue+0x90>
			SET_BIT(PORTC,enuPIN);
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_vidSetPinValue+0x86>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_vidSetPinValue+0x82>
 1e6:	82 2b       	or	r24, r18
 1e8:	85 bb       	out	0x15, r24	; 21
 1ea:	08 95       	ret
			}else{
			CLR_BIT(PORTC,enuPIN);
 1ec:	25 b3       	in	r18, 0x15	; 21
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vidSetPinValue+0x9c>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vidSetPinValue+0x98>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	85 bb       	out	0x15, r24	; 21
 202:	08 95       	ret
		}break;
		case GPIOD:
		if(enuOutputMode){
 204:	44 23       	and	r20, r20
 206:	59 f0       	breq	.+22     	; 0x21e <DIO_vidSetPinValue+0xc2>
			SET_BIT(PORTD,enuPIN);
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vidSetPinValue+0xb8>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vidSetPinValue+0xb4>
 218:	82 2b       	or	r24, r18
 21a:	82 bb       	out	0x12, r24	; 18
 21c:	08 95       	ret
			}else{
			CLR_BIT(PORTD,enuPIN);
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vidSetPinValue+0xce>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vidSetPinValue+0xca>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	82 bb       	out	0x12, r24	; 18
 234:	08 95       	ret

00000236 <main>:
#define F_CPU 8000000
#include "util/delay.h"
int main(void)
{
    /* Replace with your application code */
	SPI_MasterInit();
 236:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_MasterInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x8>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0xe>
 244:	00 00       	nop

	
    while (1) 
    {
		_delay_ms(20);
		SPI_MasterTransmit('m');
 246:	8d e6       	ldi	r24, 0x6D	; 109
 248:	0e 94 4a 01 	call	0x294	; 0x294 <SPI_MasterTransmit>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	9c e9       	ldi	r25, 0x9C	; 156
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x1a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x20>
 256:	00 00       	nop
 258:	f0 cf       	rjmp	.-32     	; 0x23a <main+0x4>

0000025a <SPI_MasterInit>:

u8 SPI_SlaveReceive(void){
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
	
}
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	65 e0       	ldi	r22, 0x05	; 5
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	67 e0       	ldi	r22, 0x07	; 7
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	64 e0       	ldi	r22, 0x04	; 4
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_vidSetPinValue>
 28c:	8d b1       	in	r24, 0x0d	; 13
 28e:	81 65       	ori	r24, 0x51	; 81
 290:	8d b9       	out	0x0d, r24	; 13
 292:	08 95       	ret

00000294 <SPI_MasterTransmit>:

void SPI_MasterTransmit(u8 COPY_u8Data){
	
	SPDR = COPY_u8Data;
 294:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 296:	77 9b       	sbis	0x0e, 7	; 14
 298:	fe cf       	rjmp	.-4      	; 0x296 <SPI_MasterTransmit+0x2>
	
	
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
