
CAN_transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000057a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018ac  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098f  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac2  00000000  00000000  000029e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000760  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c10  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 01 	call	0x246	; 0x246 <main>
  8a:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vidSetPinMode>:
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_vidSetPinMode(_enuPORTx enuPORT,_enuPINx enuPIN,_enuMode enuMode){
	
	switch(enuPORT)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	01 f1       	breq	.+64     	; 0xd6 <DIO_vidSetPinMode+0x44>
  96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_vidSetPinMode+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b1 f1       	breq	.+108    	; 0x108 <DIO_vidSetPinMode+0x76>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_vidSetPinMode+0x10>
  a0:	4c c0       	rjmp	.+152    	; 0x13a <DIO_vidSetPinMode+0xa8>
  a2:	08 95       	ret
	{
		case GPIOA:
		if(enuMode){
  a4:	44 23       	and	r20, r20
  a6:	59 f0       	breq	.+22     	; 0xbe <DIO_vidSetPinMode+0x2c>
			SET_BIT(DDRA,enuPIN);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_vidSetPinMode+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_vidSetPinMode+0x1e>
  b8:	82 2b       	or	r24, r18
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
			}else{
			CLR_BIT(DDRA,enuPIN);
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_vidSetPinMode+0x38>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_vidSetPinMode+0x34>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
			#if PULL_UP
			SET_BIT(PORTA,High);
			#endif
		}break;
		case GPIOB:
		if(enuMode){
  d6:	44 23       	and	r20, r20
  d8:	59 f0       	breq	.+22     	; 0xf0 <DIO_vidSetPinMode+0x5e>
			SET_BIT(DDRB,enuPIN);
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vidSetPinMode+0x54>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vidSetPinMode+0x50>
  ea:	82 2b       	or	r24, r18
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	08 95       	ret
			}else{
			CLR_BIT(DDRB,enuPIN);
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vidSetPinMode+0x6a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vidSetPinMode+0x66>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
			#if(PULL_UP)
			SET_BIT(PORTB,High);
			#endif
		}break;
		case GPIOC:
		if(enuMode){
 108:	44 23       	and	r20, r20
 10a:	59 f0       	breq	.+22     	; 0x122 <DIO_vidSetPinMode+0x90>
			SET_BIT(DDRC,enuPIN);
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vidSetPinMode+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vidSetPinMode+0x82>
 11c:	82 2b       	or	r24, r18
 11e:	84 bb       	out	0x14, r24	; 20
 120:	08 95       	ret
			}else{
			CLR_BIT(DDRC,enuPIN);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_vidSetPinMode+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_vidSetPinMode+0x98>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
			#if(PULL_UP)
			SET_BIT(PORTC,High);
			#endif
		}break;
		case GPIOD:
		if(enuMode){
 13a:	44 23       	and	r20, r20
 13c:	59 f0       	breq	.+22     	; 0x154 <DIO_vidSetPinMode+0xc2>
			SET_BIT(DDRD,enuPIN);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vidSetPinMode+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vidSetPinMode+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret

			}else{
			CLR_BIT(DDRD,enuPIN);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vidSetPinMode+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vidSetPinMode+0xca>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <DIO_vidSetPinValue>:
	}
	
}
void DIO_vidSetPinValue(_enuPORTx enuPORT,_enuPINx enuPIN,_enuOutputMode enuOutputMode){
	
	switch(enuPORT)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	01 f1       	breq	.+64     	; 0x1b0 <DIO_vidSetPinValue+0x44>
 170:	30 f0       	brcs	.+12     	; 0x17e <DIO_vidSetPinValue+0x12>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	b1 f1       	breq	.+108    	; 0x1e2 <DIO_vidSetPinValue+0x76>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <DIO_vidSetPinValue+0x10>
 17a:	4c c0       	rjmp	.+152    	; 0x214 <DIO_vidSetPinValue+0xa8>
 17c:	08 95       	ret
	{
		case GPIOA:
		if(enuOutputMode){
 17e:	44 23       	and	r20, r20
 180:	59 f0       	breq	.+22     	; 0x198 <DIO_vidSetPinValue+0x2c>
			SET_BIT(PORTA,enuPIN);
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vidSetPinValue+0x22>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vidSetPinValue+0x1e>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
			}else{
			CLR_BIT(PORTA,enuPIN);
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_vidSetPinValue+0x38>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_vidSetPinValue+0x34>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		}break;
		case GPIOB:
		if(enuOutputMode){
 1b0:	44 23       	and	r20, r20
 1b2:	59 f0       	breq	.+22     	; 0x1ca <DIO_vidSetPinValue+0x5e>
			SET_BIT(PORTB,enuPIN);
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_vidSetPinValue+0x54>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_vidSetPinValue+0x50>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
			}else{
			CLR_BIT(PORTB,enuPIN);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_vidSetPinValue+0x6a>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_vidSetPinValue+0x66>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		}break;
		case GPIOC:
		if(enuOutputMode){
 1e2:	44 23       	and	r20, r20
 1e4:	59 f0       	breq	.+22     	; 0x1fc <DIO_vidSetPinValue+0x90>
			SET_BIT(PORTC,enuPIN);
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_vidSetPinValue+0x86>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_vidSetPinValue+0x82>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
			}else{
			CLR_BIT(PORTC,enuPIN);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_vidSetPinValue+0x9c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_vidSetPinValue+0x98>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
		}break;
		case GPIOD:
		if(enuOutputMode){
 214:	44 23       	and	r20, r20
 216:	59 f0       	breq	.+22     	; 0x22e <DIO_vidSetPinValue+0xc2>
			SET_BIT(PORTD,enuPIN);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vidSetPinValue+0xb8>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vidSetPinValue+0xb4>
 228:	82 2b       	or	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
			}else{
			CLR_BIT(PORTD,enuPIN);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidSetPinValue+0xce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidSetPinValue+0xca>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <main>:
#include "MCP2515_interface.h"

#include "util/delay.h"

int main(void)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	28 97       	sbiw	r28, 0x08	; 8
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
	MCP2515_voidTXInit();
 25a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <MCP2515_voidTXInit>
	u8 msgData[] = {'a','b','c','d','e','f','g','h'};
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	e0 e6       	ldi	r30, 0x60	; 96
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	de 01       	movw	r26, r28
 266:	11 96       	adiw	r26, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x22>
    /* Replace with your application code */
    while (1) 
    {
		MCP2515_voidSendMessage(0,0x7E1,msgData,8);
 270:	08 e0       	ldi	r16, 0x08	; 8
 272:	10 e0       	ldi	r17, 0x00	; 0
 274:	2c 2f       	mov	r18, r28
 276:	2f 5f       	subi	r18, 0xFF	; 255
 278:	41 ee       	ldi	r20, 0xE1	; 225
 27a:	57 e0       	ldi	r21, 0x07	; 7
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 30 02 	call	0x460	; 0x460 <MCP2515_voidSendMessage>
		for(u8 i=0;i<8;i++){
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0a c0       	rjmp	.+20     	; 0x29e <main+0x58>
			msgData[i]++;
 28a:	e1 e0       	ldi	r30, 0x01	; 1
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ec 0f       	add	r30, r28
 290:	fd 1f       	adc	r31, r29
 292:	e8 0f       	add	r30, r24
 294:	f1 1d       	adc	r31, r1
 296:	90 81       	ld	r25, Z
 298:	9f 5f       	subi	r25, 0xFF	; 255
 29a:	90 83       	st	Z, r25
	u8 msgData[] = {'a','b','c','d','e','f','g','h'};
    /* Replace with your application code */
    while (1) 
    {
		MCP2515_voidSendMessage(0,0x7E1,msgData,8);
		for(u8 i=0;i<8;i++){
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	88 30       	cpi	r24, 0x08	; 8
 2a0:	a0 f3       	brcs	.-24     	; 0x28a <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f e3       	ldi	r18, 0x3F	; 63
 2a4:	8d e0       	ldi	r24, 0x0D	; 13
 2a6:	93 e0       	ldi	r25, 0x03	; 3
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x62>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x6c>
 2b2:	00 00       	nop
 2b4:	dd cf       	rjmp	.-70     	; 0x270 <main+0x2a>

000002b6 <MCP2515_u8ReadReg>:
		 MCP_2515_voidModify(MCP2515_CANCTRL,0xE0,0x40);
		 while(MCP2515_u8ReadReg(MCP2515_CANSTAT>>5) != 0x40);
	 }
}
void MCP2515_voidEnableClock(){
	MCP_2515_voidModify(MCP2515_CANCTRL,0xF4,0x04);
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 2d2:	c8 2f       	mov	r28, r24
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 2da:	8c 2f       	mov	r24, r28
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <MCP2515_voidWriteReg>:
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	d8 2f       	mov	r29, r24
 2e6:	c6 2f       	mov	r28, r22
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 2f4:	8d 2f       	mov	r24, r29
 2f6:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <MCP_2515_voidResetReg>:
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 312:	80 ec       	ldi	r24, 0xC0	; 192
 314:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 31e:	08 95       	ret

00000320 <MCP_2515_voidModify>:
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	18 2f       	mov	r17, r24
 328:	d6 2f       	mov	r29, r22
 32a:	c4 2f       	mov	r28, r20
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 338:	81 2f       	mov	r24, r17
 33a:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 33e:	8d 2f       	mov	r24, r29
 340:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 344:	8c 2f       	mov	r24, r28
 346:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	08 95       	ret

00000358 <MCP2515_voidSetBitTiming>:
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	68 2f       	mov	r22, r24
 35e:	8a e2       	ldi	r24, 0x2A	; 42
 360:	0e 94 70 01 	call	0x2e0	; 0x2e0 <MCP2515_voidWriteReg>
 364:	6c 2f       	mov	r22, r28
 366:	89 e2       	ldi	r24, 0x29	; 41
 368:	0e 94 70 01 	call	0x2e0	; 0x2e0 <MCP2515_voidWriteReg>
 36c:	6c 2f       	mov	r22, r28
 36e:	88 e2       	ldi	r24, 0x28	; 40
 370:	0e 94 70 01 	call	0x2e0	; 0x2e0 <MCP2515_voidWriteReg>
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <MCP2515_voidSetMode>:
 378:	81 11       	cpse	r24, r1
 37a:	06 c0       	rjmp	.+12     	; 0x388 <MCP2515_voidSetMode+0x10>
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	60 ee       	ldi	r22, 0xE0	; 224
 380:	8f e0       	ldi	r24, 0x0F	; 15
 382:	0e 94 90 01 	call	0x320	; 0x320 <MCP_2515_voidModify>
 386:	08 95       	ret
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <MCP2515_voidSetMode+0x2a>
 38c:	40 e1       	ldi	r20, 0x10	; 16
 38e:	60 ee       	ldi	r22, 0xE0	; 224
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	0e 94 90 01 	call	0x320	; 0x320 <MCP_2515_voidModify>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_u8ReadReg>
 39c:	80 31       	cpi	r24, 0x10	; 16
 39e:	d9 f7       	brne	.-10     	; 0x396 <MCP2515_voidSetMode+0x1e>
 3a0:	08 95       	ret
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	59 f4       	brne	.+22     	; 0x3bc <MCP2515_voidSetMode+0x44>
 3a6:	40 e2       	ldi	r20, 0x20	; 32
 3a8:	60 ee       	ldi	r22, 0xE0	; 224
 3aa:	8f e0       	ldi	r24, 0x0F	; 15
 3ac:	0e 94 90 01 	call	0x320	; 0x320 <MCP_2515_voidModify>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_u8ReadReg>
 3b6:	80 32       	cpi	r24, 0x20	; 32
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <MCP2515_voidSetMode+0x38>
 3ba:	08 95       	ret
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	59 f4       	brne	.+22     	; 0x3d6 <MCP2515_voidSetMode+0x5e>
 3c0:	40 e3       	ldi	r20, 0x30	; 48
 3c2:	60 ee       	ldi	r22, 0xE0	; 224
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	0e 94 90 01 	call	0x320	; 0x320 <MCP_2515_voidModify>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_u8ReadReg>
 3d0:	80 33       	cpi	r24, 0x30	; 48
 3d2:	d9 f7       	brne	.-10     	; 0x3ca <MCP2515_voidSetMode+0x52>
 3d4:	08 95       	ret
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	51 f4       	brne	.+20     	; 0x3ee <MCP2515_voidSetMode+0x76>
 3da:	40 e4       	ldi	r20, 0x40	; 64
 3dc:	60 ee       	ldi	r22, 0xE0	; 224
 3de:	8f e0       	ldi	r24, 0x0F	; 15
 3e0:	0e 94 90 01 	call	0x320	; 0x320 <MCP_2515_voidModify>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_u8ReadReg>
 3ea:	80 34       	cpi	r24, 0x40	; 64
 3ec:	d9 f7       	brne	.-10     	; 0x3e4 <MCP2515_voidSetMode+0x6c>
 3ee:	08 95       	ret

000003f0 <MCP2515_voidTXInit>:
}
void MCP2515_voidTXInit(){
	// SPI Initialization
	SPI_MasterInit();
 3f0:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_MasterInit>
	// MCP Reset Regs
	MCP_2515_voidResetReg();
 3f4:	0e 94 86 01 	call	0x30c	; 0x30c <MCP_2515_voidResetReg>
	// Enter Configration mode
	MCP2515_voidSetMode(CNF_Mode);
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	0e 94 bc 01 	call	0x378	; 0x378 <MCP2515_voidSetMode>
	//Enable Clock
	void MCP2515_voidEnableClock();
	// check configration mode
	while(MCP2515_u8ReadReg(MCP2515_CANSTAT>>5) != 0x40);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_u8ReadReg>
 404:	80 34       	cpi	r24, 0x40	; 64
 406:	d9 f7       	brne	.-10     	; 0x3fe <MCP2515_voidTXInit+0xe>
	
	MCP2515_voidSetBitTiming(0x80,0xB1,0x05);
 408:	45 e0       	ldi	r20, 0x05	; 5
 40a:	61 eb       	ldi	r22, 0xB1	; 177
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	0e 94 ac 01 	call	0x358	; 0x358 <MCP2515_voidSetBitTiming>
	
	MCP2515_voidSetMode(Normal_Mode);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 bc 01 	call	0x378	; 0x378 <MCP2515_voidSetMode>
 418:	08 95       	ret

0000041a <MCP2515_voidSendToReq>:
	MCP2515_voidSendToReq(bufferID);

}
void MCP2515_voidSendToReq(_enuBUFFERx bufferID){
	
		if(bufferID == Buffer0){
 41a:	81 11       	cpse	r24, r1
 41c:	0a c0       	rjmp	.+20     	; 0x432 <MCP2515_voidSendToReq+0x18>
			SPI_voidSlaveSelect(1);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
			SPI_MasterTransmit(MCP2515_RTS_BUFF0_INST);
 424:	81 e8       	ldi	r24, 0x81	; 129
 426:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
			SPI_voidSlaveSelect(0);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 430:	08 95       	ret
			
		}else if(bufferID == Buffer1){
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	49 f4       	brne	.+18     	; 0x448 <MCP2515_voidSendToReq+0x2e>
			SPI_voidSlaveSelect(1);
 436:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
			SPI_MasterTransmit(MCP2515_RTS_BUFF1_INST);
 43a:	82 e8       	ldi	r24, 0x82	; 130
 43c:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
			SPI_voidSlaveSelect(0);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 446:	08 95       	ret
			
		}else if(bufferID == Buffer2){
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	49 f4       	brne	.+18     	; 0x45e <MCP2515_voidSendToReq+0x44>
			SPI_voidSlaveSelect(1);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
			SPI_MasterTransmit(MCP2515_RTS_BUFF2_INST);
 452:	83 e8       	ldi	r24, 0x83	; 131
 454:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
			SPI_voidSlaveSelect(0);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
 45e:	08 95       	ret

00000460 <MCP2515_voidSendMessage>:
	
	MCP2515_voidSetBitTiming(0x80,0xB1,0x05);
	
	MCP2515_voidSetMode(Normal_Mode);
}
void MCP2515_voidSendMessage(_enuBUFFERx bufferID,u32 MSGID,u8 DLC, u8* DATA){
 460:	8f 92       	push	r8
 462:	9f 92       	push	r9
 464:	af 92       	push	r10
 466:	bf 92       	push	r11
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	f8 2e       	mov	r15, r24
 474:	4a 01       	movw	r8, r20
 476:	5b 01       	movw	r10, r22
 478:	d2 2f       	mov	r29, r18
	SPI_voidSlaveSelect(1);
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
	
	SPI_MasterTransmit(MCP2515_WRITE_INST);
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	SPI_MasterTransmit(MCP2515_TXB0CTRL);
 486:	80 e3       	ldi	r24, 0x30	; 48
 488:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	
	// Set priority (incremental)
	SPI_MasterTransmit(0x00);
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	// Message ID 0b11000001111
	/* ID HIGH*/
	SPI_MasterTransmit((u8)(MSGID >> 3));
 492:	d5 01       	movw	r26, r10
 494:	c4 01       	movw	r24, r8
 496:	68 94       	set
 498:	12 f8       	bld	r1, 2
 49a:	b6 95       	lsr	r27
 49c:	a7 95       	ror	r26
 49e:	97 95       	ror	r25
 4a0:	87 95       	ror	r24
 4a2:	16 94       	lsr	r1
 4a4:	d1 f7       	brne	.-12     	; 0x49a <MCP2515_voidSendMessage+0x3a>
 4a6:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	/* ID LOW*/
	SPI_MasterTransmit((u8)(MSGID<<5));
 4aa:	88 2d       	mov	r24, r8
 4ac:	82 95       	swap	r24
 4ae:	88 0f       	add	r24, r24
 4b0:	80 7e       	andi	r24, 0xE0	; 224
 4b2:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	/*Extended ID*/
	SPI_MasterTransmit(0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	SPI_MasterTransmit(0);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	//DLC
	SPI_MasterTransmit(DLC & 0x0F);
 4c2:	df 70       	andi	r29, 0x0F	; 15
 4c4:	8d 2f       	mov	r24, r29
 4c6:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	//DATA
	for(u8 i=0;i<(DLC & 0X0F);i++){
 4ca:	c0 e0       	ldi	r28, 0x00	; 0
 4cc:	07 c0       	rjmp	.+14     	; 0x4dc <MCP2515_voidSendMessage+0x7c>
		SPI_MasterTransmit(DATA[i]);
 4ce:	f8 01       	movw	r30, r16
 4d0:	ec 0f       	add	r30, r28
 4d2:	f1 1d       	adc	r31, r1
 4d4:	80 81       	ld	r24, Z
 4d6:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_MasterTransmit>
	SPI_MasterTransmit(0);
	SPI_MasterTransmit(0);
	//DLC
	SPI_MasterTransmit(DLC & 0x0F);
	//DATA
	for(u8 i=0;i<(DLC & 0X0F);i++){
 4da:	cf 5f       	subi	r28, 0xFF	; 255
 4dc:	8c 2f       	mov	r24, r28
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	4d 2f       	mov	r20, r29
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	84 17       	cp	r24, r20
 4e6:	95 07       	cpc	r25, r21
 4e8:	94 f3       	brlt	.-28     	; 0x4ce <MCP2515_voidSendMessage+0x6e>
		SPI_MasterTransmit(DATA[i]);
	}
	/*release BUS*/
	SPI_voidSlaveSelect(0);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 aa 02 	call	0x554	; 0x554 <SPI_voidSlaveSelect>
		/*request to send*/
	MCP2515_voidSendToReq(bufferID);
 4f0:	8f 2d       	mov	r24, r15
 4f2:	0e 94 0d 02 	call	0x41a	; 0x41a <MCP2515_voidSendToReq>

}
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	bf 90       	pop	r11
 502:	af 90       	pop	r10
 504:	9f 90       	pop	r9
 506:	8f 90       	pop	r8
 508:	08 95       	ret

0000050a <SPI_MasterInit>:

u8 SPI_SlaveReceive(void){
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
	
}
 50a:	41 e0       	ldi	r20, 0x01	; 1
 50c:	65 e0       	ldi	r22, 0x05	; 5
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	67 e0       	ldi	r22, 0x07	; 7
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	66 e0       	ldi	r22, 0x06	; 6
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 528:	8d b1       	in	r24, 0x0d	; 13
 52a:	80 64       	ori	r24, 0x40	; 64
 52c:	8f 7d       	andi	r24, 0xDF	; 223
 52e:	8d b9       	out	0x0d, r24	; 13
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	64 e0       	ldi	r22, 0x04	; 4
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	64 e0       	ldi	r22, 0x04	; 4
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
 544:	8d b1       	in	r24, 0x0d	; 13
 546:	80 61       	ori	r24, 0x10	; 16
 548:	80 7f       	andi	r24, 0xF0	; 240
 54a:	8d b9       	out	0x0d, r24	; 13
 54c:	8e b1       	in	r24, 0x0e	; 14
 54e:	8e 7f       	andi	r24, 0xFE	; 254
 550:	8e b9       	out	0x0e, r24	; 14
 552:	08 95       	ret

00000554 <SPI_voidSlaveSelect>:
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	29 f4       	brne	.+10     	; 0x562 <SPI_voidSlaveSelect+0xe>
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
 560:	08 95       	ret
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	64 e0       	ldi	r22, 0x04	; 4
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
 56c:	08 95       	ret

0000056e <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 COPY_u8Data){
	
	SPDR = COPY_u8Data;
 56e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 570:	77 9b       	sbis	0x0e, 7	; 14
 572:	fe cf       	rjmp	.-4      	; 0x570 <SPI_MasterTransmit+0x2>
	return SPDR;
	
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
