
CAN_reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000796  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  0000080a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002217  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af3  00000000  00000000  00002c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbb  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  000043d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081c  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001617  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000661f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
  8a:	0c 94 c9 03 	jmp	0x792	; 0x792 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vidSetPinMode>:
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_vidSetPinMode(_enuPORTx enuPORT,_enuPINx enuPIN,_enuMode enuMode){
	
	switch(enuPORT)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	01 f1       	breq	.+64     	; 0xd6 <DIO_vidSetPinMode+0x44>
  96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_vidSetPinMode+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b1 f1       	breq	.+108    	; 0x108 <DIO_vidSetPinMode+0x76>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_vidSetPinMode+0x10>
  a0:	4c c0       	rjmp	.+152    	; 0x13a <DIO_vidSetPinMode+0xa8>
  a2:	08 95       	ret
	{
		case GPIOA:
		if(enuMode){
  a4:	44 23       	and	r20, r20
  a6:	59 f0       	breq	.+22     	; 0xbe <DIO_vidSetPinMode+0x2c>
			SET_BIT(DDRA,enuPIN);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_vidSetPinMode+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_vidSetPinMode+0x1e>
  b8:	82 2b       	or	r24, r18
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
			}else{
			CLR_BIT(DDRA,enuPIN);
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_vidSetPinMode+0x38>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_vidSetPinMode+0x34>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
			#if PULL_UP
			SET_BIT(PORTA,High);
			#endif
		}break;
		case GPIOB:
		if(enuMode){
  d6:	44 23       	and	r20, r20
  d8:	59 f0       	breq	.+22     	; 0xf0 <DIO_vidSetPinMode+0x5e>
			SET_BIT(DDRB,enuPIN);
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vidSetPinMode+0x54>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vidSetPinMode+0x50>
  ea:	82 2b       	or	r24, r18
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	08 95       	ret
			}else{
			CLR_BIT(DDRB,enuPIN);
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vidSetPinMode+0x6a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vidSetPinMode+0x66>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
			#if(PULL_UP)
			SET_BIT(PORTB,High);
			#endif
		}break;
		case GPIOC:
		if(enuMode){
 108:	44 23       	and	r20, r20
 10a:	59 f0       	breq	.+22     	; 0x122 <DIO_vidSetPinMode+0x90>
			SET_BIT(DDRC,enuPIN);
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vidSetPinMode+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vidSetPinMode+0x82>
 11c:	82 2b       	or	r24, r18
 11e:	84 bb       	out	0x14, r24	; 20
 120:	08 95       	ret
			}else{
			CLR_BIT(DDRC,enuPIN);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_vidSetPinMode+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_vidSetPinMode+0x98>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
			#if(PULL_UP)
			SET_BIT(PORTC,High);
			#endif
		}break;
		case GPIOD:
		if(enuMode){
 13a:	44 23       	and	r20, r20
 13c:	59 f0       	breq	.+22     	; 0x154 <DIO_vidSetPinMode+0xc2>
			SET_BIT(DDRD,enuPIN);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vidSetPinMode+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vidSetPinMode+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret

			}else{
			CLR_BIT(DDRD,enuPIN);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vidSetPinMode+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vidSetPinMode+0xca>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <DIO_vidSetPinValue>:
	}
	
}
void DIO_vidSetPinValue(_enuPORTx enuPORT,_enuPINx enuPIN,_enuOutputMode enuOutputMode){
	
	switch(enuPORT)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	01 f1       	breq	.+64     	; 0x1b0 <DIO_vidSetPinValue+0x44>
 170:	30 f0       	brcs	.+12     	; 0x17e <DIO_vidSetPinValue+0x12>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	b1 f1       	breq	.+108    	; 0x1e2 <DIO_vidSetPinValue+0x76>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <DIO_vidSetPinValue+0x10>
 17a:	4c c0       	rjmp	.+152    	; 0x214 <DIO_vidSetPinValue+0xa8>
 17c:	08 95       	ret
	{
		case GPIOA:
		if(enuOutputMode){
 17e:	44 23       	and	r20, r20
 180:	59 f0       	breq	.+22     	; 0x198 <DIO_vidSetPinValue+0x2c>
			SET_BIT(PORTA,enuPIN);
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vidSetPinValue+0x22>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vidSetPinValue+0x1e>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
			}else{
			CLR_BIT(PORTA,enuPIN);
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_vidSetPinValue+0x38>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_vidSetPinValue+0x34>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		}break;
		case GPIOB:
		if(enuOutputMode){
 1b0:	44 23       	and	r20, r20
 1b2:	59 f0       	breq	.+22     	; 0x1ca <DIO_vidSetPinValue+0x5e>
			SET_BIT(PORTB,enuPIN);
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_vidSetPinValue+0x54>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_vidSetPinValue+0x50>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
			}else{
			CLR_BIT(PORTB,enuPIN);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_vidSetPinValue+0x6a>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_vidSetPinValue+0x66>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		}break;
		case GPIOC:
		if(enuOutputMode){
 1e2:	44 23       	and	r20, r20
 1e4:	59 f0       	breq	.+22     	; 0x1fc <DIO_vidSetPinValue+0x90>
			SET_BIT(PORTC,enuPIN);
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_vidSetPinValue+0x86>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_vidSetPinValue+0x82>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
			}else{
			CLR_BIT(PORTC,enuPIN);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_vidSetPinValue+0x9c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_vidSetPinValue+0x98>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
		}break;
		case GPIOD:
		if(enuOutputMode){
 214:	44 23       	and	r20, r20
 216:	59 f0       	breq	.+22     	; 0x22e <DIO_vidSetPinValue+0xc2>
			SET_BIT(PORTD,enuPIN);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vidSetPinValue+0xb8>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vidSetPinValue+0xb4>
 228:	82 2b       	or	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
			}else{
			CLR_BIT(PORTD,enuPIN);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidSetPinValue+0xce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidSetPinValue+0xca>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_OutpGetPinValue>:
	}
}
_enuOutputMode DIO_OutpGetPinValue(_enuPORTx enuPORT,_enuPINx enuPIN){
	_enuOutputMode Output;
	
	switch(enuPORT)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	e1 f0       	breq	.+56     	; 0x282 <DIO_OutpGetPinValue+0x3c>
 24a:	30 f0       	brcs	.+12     	; 0x258 <DIO_OutpGetPinValue+0x12>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	71 f1       	breq	.+92     	; 0x2ac <DIO_OutpGetPinValue+0x66>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	09 f4       	brne	.+2      	; 0x256 <DIO_OutpGetPinValue+0x10>
 254:	40 c0       	rjmp	.+128    	; 0x2d6 <DIO_OutpGetPinValue+0x90>
 256:	53 c0       	rjmp	.+166    	; 0x2fe <DIO_OutpGetPinValue+0xb8>
	{
		case GPIOA:
		Output = GET_BIT(PINA,enuPIN);
 258:	49 b3       	in	r20, 0x19	; 25
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9c 01       	movw	r18, r24
 260:	06 2e       	mov	r0, r22
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_OutpGetPinValue+0x22>
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_OutpGetPinValue+0x1e>
 26c:	84 2f       	mov	r24, r20
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	82 23       	and	r24, r18
 272:	93 23       	and	r25, r19
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_OutpGetPinValue+0x34>
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_OutpGetPinValue+0x30>
 27e:	98 2f       	mov	r25, r24
		break;
 280:	3e c0       	rjmp	.+124    	; 0x2fe <DIO_OutpGetPinValue+0xb8>
		case GPIOB:
		Output = GET_BIT(PINB,enuPIN);
 282:	46 b3       	in	r20, 0x16	; 22
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9c 01       	movw	r18, r24
 28a:	06 2e       	mov	r0, r22
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_OutpGetPinValue+0x4c>
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_OutpGetPinValue+0x48>
 296:	84 2f       	mov	r24, r20
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	82 23       	and	r24, r18
 29c:	93 23       	and	r25, r19
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_OutpGetPinValue+0x5e>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_OutpGetPinValue+0x5a>
 2a8:	98 2f       	mov	r25, r24
		break;
 2aa:	29 c0       	rjmp	.+82     	; 0x2fe <DIO_OutpGetPinValue+0xb8>
		case GPIOC:
		Output = GET_BIT(PINC,enuPIN);
 2ac:	43 b3       	in	r20, 0x13	; 19
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	9c 01       	movw	r18, r24
 2b4:	06 2e       	mov	r0, r22
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_OutpGetPinValue+0x76>
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_OutpGetPinValue+0x72>
 2c0:	84 2f       	mov	r24, r20
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	82 23       	and	r24, r18
 2c6:	93 23       	and	r25, r19
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_OutpGetPinValue+0x88>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_OutpGetPinValue+0x84>
 2d2:	98 2f       	mov	r25, r24
		break;
 2d4:	14 c0       	rjmp	.+40     	; 0x2fe <DIO_OutpGetPinValue+0xb8>
		case GPIOD:
		Output = GET_BIT(PIND,enuPIN);
 2d6:	40 b3       	in	r20, 0x10	; 16
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9c 01       	movw	r18, r24
 2de:	06 2e       	mov	r0, r22
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_OutpGetPinValue+0xa0>
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_OutpGetPinValue+0x9c>
 2ea:	84 2f       	mov	r24, r20
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	82 23       	and	r24, r18
 2f0:	93 23       	and	r25, r19
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_OutpGetPinValue+0xb2>
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_OutpGetPinValue+0xae>
 2fc:	98 2f       	mov	r25, r24
		break;
		default:break;
	}
	return Output;
}
 2fe:	89 2f       	mov	r24, r25
 300:	08 95       	ret

00000302 <DIO_vidSetPort>:
void DIO_vidSetPort(_enuPORTx enuPORT,_enuMode enuMode){
	
	switch(enuPORT)
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	69 f0       	breq	.+26     	; 0x320 <DIO_vidSetPort+0x1e>
 306:	28 f0       	brcs	.+10     	; 0x312 <DIO_vidSetPort+0x10>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	89 f0       	breq	.+34     	; 0x32e <DIO_vidSetPort+0x2c>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	b1 f0       	breq	.+44     	; 0x33c <DIO_vidSetPort+0x3a>
 310:	08 95       	ret
	{
		case GPIOA:
			if(enuMode == Output){
 312:	61 30       	cpi	r22, 0x01	; 1
 314:	19 f4       	brne	.+6      	; 0x31c <DIO_vidSetPort+0x1a>
				DDRA = 0xff;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	8a bb       	out	0x1a, r24	; 26
 31a:	08 95       	ret
			}else{
				DDRA = 0x00;
 31c:	1a ba       	out	0x1a, r1	; 26
 31e:	08 95       	ret
			}
			break;
		case GPIOB:
			if(enuMode == Output){
 320:	61 30       	cpi	r22, 0x01	; 1
 322:	19 f4       	brne	.+6      	; 0x32a <DIO_vidSetPort+0x28>
				DDRB = 0xff;
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	87 bb       	out	0x17, r24	; 23
 328:	08 95       	ret
			}else{
				DDRB = 0x00;
 32a:	17 ba       	out	0x17, r1	; 23
 32c:	08 95       	ret
			}
			break;
		case GPIOC:
			if(enuMode == Output){
 32e:	61 30       	cpi	r22, 0x01	; 1
 330:	19 f4       	brne	.+6      	; 0x338 <DIO_vidSetPort+0x36>
				DDRC = 0xff;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	84 bb       	out	0x14, r24	; 20
 336:	08 95       	ret
			}else{
				DDRC = 0x00;
 338:	14 ba       	out	0x14, r1	; 20
 33a:	08 95       	ret
			}
			break;
		case GPIOD:
			if(enuMode == Output){
 33c:	61 30       	cpi	r22, 0x01	; 1
 33e:	19 f4       	brne	.+6      	; 0x346 <DIO_vidSetPort+0x44>
				DDRD = 0xff;
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	81 bb       	out	0x11, r24	; 17
 344:	08 95       	ret
			}else{
				DDRD = 0x00;
 346:	11 ba       	out	0x11, r1	; 17
 348:	08 95       	ret

0000034a <DIO_vidWritePort>:
	}
	
}
void DIO_vidWritePort(_enuPORTx enuPORT,u8 character){
	
		switch(enuPORT)
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	41 f0       	breq	.+16     	; 0x35e <DIO_vidWritePort+0x14>
 34e:	28 f0       	brcs	.+10     	; 0x35a <DIO_vidWritePort+0x10>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	39 f0       	breq	.+14     	; 0x362 <DIO_vidWritePort+0x18>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	39 f0       	breq	.+14     	; 0x366 <DIO_vidWritePort+0x1c>
 358:	08 95       	ret
	{
		case GPIOA:
			PORTA = character;
 35a:	6b bb       	out	0x1b, r22	; 27
			break;
 35c:	08 95       	ret
		case GPIOB:
			PORTB = character;
 35e:	68 bb       	out	0x18, r22	; 24
			break;
 360:	08 95       	ret
		case GPIOC:
			PORTC = character;
 362:	65 bb       	out	0x15, r22	; 21
			break;
 364:	08 95       	ret
		case GPIOD:
			PORTD = character;
 366:	62 bb       	out	0x12, r22	; 18
 368:	08 95       	ret

0000036a <LCD_vidEnablePulse>:
	DIO_vidSetPinValue(RSport,RSpin,Low);
	DIO_vidWritePort(Data,command);
	LCD_vidEnablePulse(Eport,Epin);
	
}
static void LCD_vidEnablePulse(_enuPORTx Eport,_enuPINx Epin){
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	c8 2f       	mov	r28, r24
 370:	d6 2f       	mov	r29, r22
	DIO_vidSetPinValue(Eport,Epin,High);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	8f e9       	ldi	r24, 0x9F	; 159
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_vidEnablePulse+0x12>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_vidEnablePulse+0x18>
 382:	00 00       	nop
	_delay_ms(2);
	DIO_vidSetPinValue(Eport,Epin,Low);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	6d 2f       	mov	r22, r29
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <LCD_vidWriteCommand>:
	
	LCD_vidWriteCommand(Data,RSport,RSpin,Eport,Epin,LCD_ENTRY_MODE);
	
}

void LCD_vidWriteCommand(_enuPORTx Data,_enuPORTx RSport,_enuPINx RSpin,_enuPORTx Eport,_enuPINx Epin,u8 command){
 394:	ef 92       	push	r14
 396:	0f 93       	push	r16
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	d8 2f       	mov	r29, r24
 39e:	86 2f       	mov	r24, r22
 3a0:	64 2f       	mov	r22, r20
 3a2:	c2 2f       	mov	r28, r18
	
	DIO_vidSetPinValue(RSport,RSpin,Low);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
	DIO_vidWritePort(Data,command);
 3aa:	6e 2d       	mov	r22, r14
 3ac:	8d 2f       	mov	r24, r29
 3ae:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_vidWritePort>
	LCD_vidEnablePulse(Eport,Epin);
 3b2:	60 2f       	mov	r22, r16
 3b4:	8c 2f       	mov	r24, r28
 3b6:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_vidEnablePulse>
	
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	0f 91       	pop	r16
 3c0:	ef 90       	pop	r14
 3c2:	08 95       	ret

000003c4 <LCD_vidInit8Bit>:
#include "LCD_config.h"

#define  F_CPU 8000000UL
#include "util/delay.h"

void LCD_vidInit8Bit(_enuPORTx Data,_enuPORTx RSport,_enuPINx RSpin,_enuPORTx Eport,_enuPINx Epin){
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	c8 2f       	mov	r28, r24
 3d4:	d6 2f       	mov	r29, r22
 3d6:	14 2f       	mov	r17, r20
 3d8:	f2 2e       	mov	r15, r18
	
	DIO_vidSetPort(Data,Output);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	0e 94 81 01 	call	0x302	; 0x302 <DIO_vidSetPort>
	DIO_vidSetPinMode(RSport,RSpin,Output);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	61 2f       	mov	r22, r17
 3e4:	8d 2f       	mov	r24, r29
 3e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
	DIO_vidSetPinMode(Eport,Epin,Output);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	60 2f       	mov	r22, r16
 3ee:	8f 2d       	mov	r24, r15
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_vidInit8Bit+0x34>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_vidInit8Bit+0x3a>
 3fe:	00 00       	nop
	_delay_ms(2);
	
	LCD_vidWriteCommand(Data,RSport,RSpin,Eport,Epin,LCD_Function_8BIT_2Lines);
 400:	0f 2e       	mov	r0, r31
 402:	f8 e3       	ldi	r31, 0x38	; 56
 404:	ef 2e       	mov	r14, r31
 406:	f0 2d       	mov	r31, r0
 408:	2f 2d       	mov	r18, r15
 40a:	41 2f       	mov	r20, r17
 40c:	6d 2f       	mov	r22, r29
 40e:	8c 2f       	mov	r24, r28
 410:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_vidWriteCommand>
 414:	8f ec       	ldi	r24, 0xCF	; 207
 416:	97 e0       	ldi	r25, 0x07	; 7
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	
	_delay_ms(1);
	
	LCD_vidWriteCommand(Data,RSport,RSpin,Eport,Epin,LCD_DISP_ON_CURSOR_ON);
 420:	0f 2e       	mov	r0, r31
 422:	fe e0       	ldi	r31, 0x0E	; 14
 424:	ef 2e       	mov	r14, r31
 426:	f0 2d       	mov	r31, r0
 428:	2f 2d       	mov	r18, r15
 42a:	41 2f       	mov	r20, r17
 42c:	6d 2f       	mov	r22, r29
 42e:	8c 2f       	mov	r24, r28
 430:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_vidWriteCommand>
 434:	8f ec       	ldi	r24, 0xCF	; 207
 436:	97 e0       	ldi	r25, 0x07	; 7
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	
	_delay_ms(1);
	
	LCD_vidWriteCommand(Data,RSport,RSpin,Eport,Epin,LCD_CLEAR_SCREEN);
 440:	ee 24       	eor	r14, r14
 442:	e3 94       	inc	r14
 444:	2f 2d       	mov	r18, r15
 446:	41 2f       	mov	r20, r17
 448:	6d 2f       	mov	r22, r29
 44a:	8c 2f       	mov	r24, r28
 44c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_vidWriteCommand>
 450:	8f ec       	ldi	r24, 0xCF	; 207
 452:	97 e0       	ldi	r25, 0x07	; 7
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop

	_delay_ms(1);
	
	LCD_vidWriteCommand(Data,RSport,RSpin,Eport,Epin,LCD_ENTRY_MODE);
 45c:	0f 2e       	mov	r0, r31
 45e:	f6 e0       	ldi	r31, 0x06	; 6
 460:	ef 2e       	mov	r14, r31
 462:	f0 2d       	mov	r31, r0
 464:	2f 2d       	mov	r18, r15
 466:	41 2f       	mov	r20, r17
 468:	6d 2f       	mov	r22, r29
 46a:	8c 2f       	mov	r24, r28
 46c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_vidWriteCommand>
	
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	ff 90       	pop	r15
 47a:	ef 90       	pop	r14
 47c:	df 90       	pop	r13
 47e:	08 95       	ret

00000480 <LCD_vidWriteCharacter>:
static void LCD_vidEnablePulse(_enuPORTx Eport,_enuPINx Epin){
	DIO_vidSetPinValue(Eport,Epin,High);
	_delay_ms(2);
	DIO_vidSetPinValue(Eport,Epin,Low);
}
void LCD_vidWriteCharacter(_enuPORTx Data,_enuPORTx RSport,_enuPINx RSpin,_enuPORTx Eport,_enuPINx Epin,u8 character){
 480:	ef 92       	push	r14
 482:	0f 93       	push	r16
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	d8 2f       	mov	r29, r24
 48a:	86 2f       	mov	r24, r22
 48c:	64 2f       	mov	r22, r20
 48e:	c2 2f       	mov	r28, r18
	
	DIO_vidSetPinValue(RSport,RSpin,High);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
	DIO_vidWritePort(Data,character);
 496:	6e 2d       	mov	r22, r14
 498:	8d 2f       	mov	r24, r29
 49a:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_vidWritePort>
	LCD_vidEnablePulse(Eport,Epin);
 49e:	60 2f       	mov	r22, r16
 4a0:	8c 2f       	mov	r24, r28
 4a2:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_vidEnablePulse>
	
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	0f 91       	pop	r16
 4ac:	ef 90       	pop	r14
 4ae:	08 95       	ret

000004b0 <main>:
#include "util/delay.h"

extern u8 array[];
int main(void)
{
	MCP2515_voidRXInit();
 4b0:	0e 94 49 03 	call	0x692	; 0x692 <MCP2515_voidRXInit>
	LCD_vidInit8Bit(GPIOA,GPIOC,PIN0,GPIOC,PIN1);
 4b4:	01 e0       	ldi	r16, 0x01	; 1
 4b6:	22 e0       	ldi	r18, 0x02	; 2
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_vidInit8Bit>
	DIO_vidSetPinMode(GPIOD,PIN2,Input);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	62 e0       	ldi	r22, 0x02	; 2
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
	u8 Data =0;
    /* Replace with your application code */
    while (1) 
    {
		if(DIO_OutpGetPinValue(GPIOD,PIN2) == 0){
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	0e 94 23 01 	call	0x246	; 0x246 <DIO_OutpGetPinValue>
 4d4:	81 11       	cpse	r24, r1
 4d6:	fa cf       	rjmp	.-12     	; 0x4cc <main+0x1c>
			MCP2515_u8RecieveMassage();
 4d8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MCP2515_u8RecieveMassage>
			for(u8 i=0;i<8;i++){
 4dc:	c0 e0       	ldi	r28, 0x00	; 0
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <main+0x4a>
				Data = array[6+i];
 4e0:	ec 2f       	mov	r30, r28
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	ea 59       	subi	r30, 0x9A	; 154
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	e0 80       	ld	r14, Z
				LCD_vidWriteCharacter(GPIOA,GPIOC,PIN0,GPIOC,PIN1,Data);
 4ea:	01 e0       	ldi	r16, 0x01	; 1
 4ec:	22 e0       	ldi	r18, 0x02	; 2
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 40 02 	call	0x480	; 0x480 <LCD_vidWriteCharacter>
    /* Replace with your application code */
    while (1) 
    {
		if(DIO_OutpGetPinValue(GPIOD,PIN2) == 0){
			MCP2515_u8RecieveMassage();
			for(u8 i=0;i<8;i++){
 4f8:	cf 5f       	subi	r28, 0xFF	; 255
 4fa:	c8 30       	cpi	r28, 0x08	; 8
 4fc:	88 f3       	brcs	.-30     	; 0x4e0 <main+0x30>
 4fe:	e6 cf       	rjmp	.-52     	; 0x4cc <main+0x1c>

00000500 <MCP2515_u8ReadReg>:
			SPI_MasterTransmit(MCP2515_RTS_BUFF2_INST);
			SPI_voidSlaveSelect(0);
		}
}
void MCP2515_voidSetRollOver(){
	MCP_2515_voidModify(MCP2515_RXB0CTRL,1<<3,1<<3);
 500:	cf 93       	push	r28
 502:	c8 2f       	mov	r28, r24
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 510:	8c 2f       	mov	r24, r28
 512:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 51c:	c8 2f       	mov	r28, r24
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 524:	8c 2f       	mov	r24, r28
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <MCP2515_voidWriteReg>:
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	d8 2f       	mov	r29, r24
 530:	c6 2f       	mov	r28, r22
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 53e:	8d 2f       	mov	r24, r29
 540:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 544:	8c 2f       	mov	r24, r28
 546:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <MCP_2515_voidResetReg>:
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 55c:	80 ec       	ldi	r24, 0xC0	; 192
 55e:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 568:	08 95       	ret

0000056a <MCP_2515_voidModify>:
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	18 2f       	mov	r17, r24
 572:	d6 2f       	mov	r29, r22
 574:	c4 2f       	mov	r28, r20
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 57c:	85 e0       	ldi	r24, 0x05	; 5
 57e:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 582:	81 2f       	mov	r24, r17
 584:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 588:	8d 2f       	mov	r24, r29
 58a:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 58e:	8c 2f       	mov	r24, r28
 590:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	08 95       	ret

000005a2 <MCP2515_voidSetBitTiming>:
 5a2:	cf 93       	push	r28
 5a4:	c8 2f       	mov	r28, r24
 5a6:	68 2f       	mov	r22, r24
 5a8:	8a e2       	ldi	r24, 0x2A	; 42
 5aa:	0e 94 95 02 	call	0x52a	; 0x52a <MCP2515_voidWriteReg>
 5ae:	6c 2f       	mov	r22, r28
 5b0:	89 e2       	ldi	r24, 0x29	; 41
 5b2:	0e 94 95 02 	call	0x52a	; 0x52a <MCP2515_voidWriteReg>
 5b6:	6c 2f       	mov	r22, r28
 5b8:	88 e2       	ldi	r24, 0x28	; 40
 5ba:	0e 94 95 02 	call	0x52a	; 0x52a <MCP2515_voidWriteReg>
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <MCP2515_voidSetMode>:
 5c2:	81 11       	cpse	r24, r1
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <MCP2515_voidSetMode+0x10>
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	60 ee       	ldi	r22, 0xE0	; 224
 5ca:	8f e0       	ldi	r24, 0x0F	; 15
 5cc:	0e 94 b5 02 	call	0x56a	; 0x56a <MCP_2515_voidModify>
 5d0:	08 95       	ret
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	59 f4       	brne	.+22     	; 0x5ec <MCP2515_voidSetMode+0x2a>
 5d6:	40 e1       	ldi	r20, 0x10	; 16
 5d8:	60 ee       	ldi	r22, 0xE0	; 224
 5da:	8f e0       	ldi	r24, 0x0F	; 15
 5dc:	0e 94 b5 02 	call	0x56a	; 0x56a <MCP_2515_voidModify>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 80 02 	call	0x500	; 0x500 <MCP2515_u8ReadReg>
 5e6:	80 31       	cpi	r24, 0x10	; 16
 5e8:	d9 f7       	brne	.-10     	; 0x5e0 <MCP2515_voidSetMode+0x1e>
 5ea:	08 95       	ret
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	59 f4       	brne	.+22     	; 0x606 <MCP2515_voidSetMode+0x44>
 5f0:	40 e2       	ldi	r20, 0x20	; 32
 5f2:	60 ee       	ldi	r22, 0xE0	; 224
 5f4:	8f e0       	ldi	r24, 0x0F	; 15
 5f6:	0e 94 b5 02 	call	0x56a	; 0x56a <MCP_2515_voidModify>
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 80 02 	call	0x500	; 0x500 <MCP2515_u8ReadReg>
 600:	80 32       	cpi	r24, 0x20	; 32
 602:	d9 f7       	brne	.-10     	; 0x5fa <MCP2515_voidSetMode+0x38>
 604:	08 95       	ret
 606:	83 30       	cpi	r24, 0x03	; 3
 608:	59 f4       	brne	.+22     	; 0x620 <MCP2515_voidSetMode+0x5e>
 60a:	40 e3       	ldi	r20, 0x30	; 48
 60c:	60 ee       	ldi	r22, 0xE0	; 224
 60e:	8f e0       	ldi	r24, 0x0F	; 15
 610:	0e 94 b5 02 	call	0x56a	; 0x56a <MCP_2515_voidModify>
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 80 02 	call	0x500	; 0x500 <MCP2515_u8ReadReg>
 61a:	80 33       	cpi	r24, 0x30	; 48
 61c:	d9 f7       	brne	.-10     	; 0x614 <MCP2515_voidSetMode+0x52>
 61e:	08 95       	ret
 620:	84 30       	cpi	r24, 0x04	; 4
 622:	51 f4       	brne	.+20     	; 0x638 <MCP2515_voidSetMode+0x76>
 624:	40 e4       	ldi	r20, 0x40	; 64
 626:	60 ee       	ldi	r22, 0xE0	; 224
 628:	8f e0       	ldi	r24, 0x0F	; 15
 62a:	0e 94 b5 02 	call	0x56a	; 0x56a <MCP_2515_voidModify>
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 80 02 	call	0x500	; 0x500 <MCP2515_u8ReadReg>
 634:	80 34       	cpi	r24, 0x40	; 64
 636:	d9 f7       	brne	.-10     	; 0x62e <MCP2515_voidSetMode+0x6c>
 638:	08 95       	ret

0000063a <MCP2515_voidSetMask>:
}
void MCP2515_voidSetMask(u8 maskAddress, u32 maskValue){
 63a:	cf 92       	push	r12
 63c:	df 92       	push	r13
 63e:	ef 92       	push	r14
 640:	ff 92       	push	r15
 642:	cf 93       	push	r28
 644:	c8 2f       	mov	r28, r24
 646:	6a 01       	movw	r12, r20
 648:	7b 01       	movw	r14, r22
	SPI_voidSlaveSelect(1);
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
	// NO EXTENDED 
	SPI_MasterTransmit(MCP2515_WRITE_INST);
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
	SPI_MasterTransmit(maskAddress);
 656:	8c 2f       	mov	r24, r28
 658:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
	SPI_MasterTransmit((u8)(maskValue>>3));
 65c:	d7 01       	movw	r26, r14
 65e:	c6 01       	movw	r24, r12
 660:	68 94       	set
 662:	12 f8       	bld	r1, 2
 664:	b6 95       	lsr	r27
 666:	a7 95       	ror	r26
 668:	97 95       	ror	r25
 66a:	87 95       	ror	r24
 66c:	16 94       	lsr	r1
 66e:	d1 f7       	brne	.-12     	; 0x664 <MCP2515_voidSetMask+0x2a>
 670:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
	SPI_MasterTransmit((u8)(maskValue<<5));
 674:	8c 2d       	mov	r24, r12
 676:	82 95       	swap	r24
 678:	88 0f       	add	r24, r24
 67a:	80 7e       	andi	r24, 0xE0	; 224
 67c:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
	
	SPI_voidSlaveSelect(0);
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
}
 686:	cf 91       	pop	r28
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	08 95       	ret

00000692 <MCP2515_voidRXInit>:
void MCP2515_voidRXInit(){
	// SPI Initialization
	SPI_MasterInit();
 692:	0e 94 93 03 	call	0x726	; 0x726 <SPI_MasterInit>
	// MCP Reset Regs
	MCP_2515_voidResetReg();
 696:	0e 94 ab 02 	call	0x556	; 0x556 <MCP_2515_voidResetReg>
	// Enter Configration mode
	MCP2515_voidSetMode(CNF_Mode);
 69a:	84 e0       	ldi	r24, 0x04	; 4
 69c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MCP2515_voidSetMode>
	//Enable Clock
	void MCP2515_voidEnableClock();
	// check configration mode
	while(MCP2515_u8ReadReg(MCP2515_CANSTAT>>5) != 0x40);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	0e 94 80 02 	call	0x500	; 0x500 <MCP2515_u8ReadReg>
 6a6:	80 34       	cpi	r24, 0x40	; 64
 6a8:	d9 f7       	brne	.-10     	; 0x6a0 <MCP2515_voidRXInit+0xe>
	
	MCP2515_voidSetBitTiming(0x80,0xB1,0x05);
 6aa:	45 e0       	ldi	r20, 0x05	; 5
 6ac:	61 eb       	ldi	r22, 0xB1	; 177
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <MCP2515_voidSetBitTiming>
	
	// SET MASK Accept all
	MCP2515_voidSetMask(MCP2515_RXM0SIDH,0x00000000);
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	ba 01       	movw	r22, r20
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	0e 94 1d 03 	call	0x63a	; 0x63a <MCP2515_voidSetMask>
	MCP2515_voidSetMask(MCP2515_RXM1SIDH,0x00000000);
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	ba 01       	movw	r22, r20
 6c6:	84 e2       	ldi	r24, 0x24	; 36
 6c8:	0e 94 1d 03 	call	0x63a	; 0x63a <MCP2515_voidSetMask>
	
	// Interrupt enable
	MCP2515_voidWriteReg(MCP2515_CANINTE,1<<0); 
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	8b e2       	ldi	r24, 0x2B	; 43
 6d0:	0e 94 95 02 	call	0x52a	; 0x52a <MCP2515_voidWriteReg>
	
	MCP2515_voidSetMode(Normal_Mode);
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MCP2515_voidSetMode>
 6da:	08 95       	ret

000006dc <MCP2515_u8RecieveMassage>:
	
}
u8 array[14];
void MCP2515_u8RecieveMassage(){
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
	SPI_voidSlaveSelect(1);
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
	SPI_MasterTransmit(MCP2515_READ_INST);
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
	SPI_MasterTransmit(MCP2515_RXB0CTRL);
 6ee:	80 e6       	ldi	r24, 0x60	; 96
 6f0:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
	
	for(u8 i=0;i<14;i++){
 6f4:	c0 e0       	ldi	r28, 0x00	; 0
 6f6:	0a c0       	rjmp	.+20     	; 0x70c <MCP2515_u8RecieveMassage+0x30>
		array[i] = SPI_MasterTransmit(0);
 6f8:	0c 2f       	mov	r16, r28
 6fa:	10 e0       	ldi	r17, 0x00	; 0
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_MasterTransmit>
 702:	f8 01       	movw	r30, r16
 704:	e0 5a       	subi	r30, 0xA0	; 160
 706:	ff 4f       	sbci	r31, 0xFF	; 255
 708:	80 83       	st	Z, r24
void MCP2515_u8RecieveMassage(){
	SPI_voidSlaveSelect(1);
	SPI_MasterTransmit(MCP2515_READ_INST);
	SPI_MasterTransmit(MCP2515_RXB0CTRL);
	
	for(u8 i=0;i<14;i++){
 70a:	cf 5f       	subi	r28, 0xFF	; 255
 70c:	ce 30       	cpi	r28, 0x0E	; 14
 70e:	a0 f3       	brcs	.-24     	; 0x6f8 <MCP2515_u8RecieveMassage+0x1c>
		array[i] = SPI_MasterTransmit(0);
	}
	
	SPI_voidSlaveSelect(0);
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_voidSlaveSelect>
	// reset int flag 
	MCP2515_voidWriteReg(MCP2515_CANINTF,0);
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	8c e2       	ldi	r24, 0x2C	; 44
 71a:	0e 94 95 02 	call	0x52a	; 0x52a <MCP2515_voidWriteReg>
	
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	08 95       	ret

00000726 <SPI_MasterInit>:

u8 SPI_SlaveReceive(void){
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
	
}
 726:	41 e0       	ldi	r20, 0x01	; 1
 728:	65 e0       	ldi	r22, 0x05	; 5
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 730:	41 e0       	ldi	r20, 0x01	; 1
 732:	67 e0       	ldi	r22, 0x07	; 7
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	66 e0       	ldi	r22, 0x06	; 6
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 744:	8d b1       	in	r24, 0x0d	; 13
 746:	80 64       	ori	r24, 0x40	; 64
 748:	8f 7d       	andi	r24, 0xDF	; 223
 74a:	8d b9       	out	0x0d, r24	; 13
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	64 e0       	ldi	r22, 0x04	; 4
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	64 e0       	ldi	r22, 0x04	; 4
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
 760:	8d b1       	in	r24, 0x0d	; 13
 762:	80 61       	ori	r24, 0x10	; 16
 764:	80 7f       	andi	r24, 0xF0	; 240
 766:	8d b9       	out	0x0d, r24	; 13
 768:	8e b1       	in	r24, 0x0e	; 14
 76a:	8e 7f       	andi	r24, 0xFE	; 254
 76c:	8e b9       	out	0x0e, r24	; 14
 76e:	08 95       	ret

00000770 <SPI_voidSlaveSelect>:
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	29 f4       	brne	.+10     	; 0x77e <SPI_voidSlaveSelect+0xe>
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	64 e0       	ldi	r22, 0x04	; 4
 778:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
 77c:	08 95       	ret
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	64 e0       	ldi	r22, 0x04	; 4
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidSetPinValue>
 788:	08 95       	ret

0000078a <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 COPY_u8Data){
	
	SPDR = COPY_u8Data;
 78a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 78c:	77 9b       	sbis	0x0e, 7	; 14
 78e:	fe cf       	rjmp	.-4      	; 0x78c <SPI_MasterTransmit+0x2>
	return SPDR;
	
 790:	08 95       	ret

00000792 <_exit>:
 792:	f8 94       	cli

00000794 <__stop_program>:
 794:	ff cf       	rjmp	.-2      	; 0x794 <__stop_program>
